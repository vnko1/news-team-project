import { fetchNews } from './fetchNews';
const gallery = document.querySelector('.gallery-container');
const emptyPageContainer = document.querySelector('.empty-page');

String.prototype.limit = function (limit, userParams) {
  let text = this,
    options = {
      ending: '...',
      trim: true,
      words: true,
    },
    prop,
    lastSpace,
    processed = false;

  if (limit !== parseInt(limit) || limit <= 0) return this;

  // –ø—Ä–∏–º–µ–Ω–∏—Ç—å userParams
  if (typeof userParams == 'object') {
    for (prop in userParams) {
      if (userParams.hasOwnProperty.call(userParams, prop)) {
        options[prop] = userParams[prop];
      }
    }
  }
  if (options.trim) text = text.trim();

  if (text.length <= limit) return text; // –ø–æ –¥–ª–∏–Ω–µ –≤–ø–∏—Å—ã–≤–∞–µ–º—Å—è –∏ —Ç–∞–∫
  text = text.slice(0, limit); // —Ç—É–ø–æ –æ—Ç—Ä–µ–∑–∞—Ç—å –ø–æ –ª–∏–º–∏—Ç—É
  lastSpace = text.lastIndexOf(' ');
  if (options.words && lastSpace > 0) {
    text = text.substr(0, lastSpace);
  }
  return text + options.ending;
};

// –ø–æ–≤–µ—Ä—Ç–∞—î –æ–± º—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏
function createObj({
  title = 'no data',
  description = 'no data',
  category = 'no data',
  pubDate = 'no data',
  url = 'no data',
  img,
  imgDescr = 'no data',
  id = 'no data',
  urlCategory = '',
}) {
  const imgUrl = img ? img : 'https://unsplash.it/395';

  return {
    title,
    description,
    category,
    pubDate,
    url,
    imgUrl,
    imgDescr,
    id,
    urlCategory,
  };
}

function renderNewsCards() {
  //  c—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤
  const renderData = [];
  // –æ—Ç—Ä–∏–º—É—î–º–æ –º–∞—Å–∏–≤ –¥–∞–Ω–∏—Ö –∑ –µ–∫–∑–µ–º–ø–ª—è—Ä—É –∫–ª–∞—Å—É
  const fetchData = fetchNews.getData();
  // –ø–µ—Ä–µ–±–∏—Ä–∞—î–º–æ –º–∞—Å–∏ —Ç–∞ –ø–µ—Ä—à—ñ 8 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø—É—à–∏–º–æ –≤ renderData
  for (let i = 0; i < fetchData.length; i++) {
    if (i >= 8) break;
    renderData.push(fetchData[i]);
  }
  // —Å—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä–æ–∫—É —Ä–æ–∑–º—ñ—Ç–∫–∏
  const markUp = renderData.reduce((acc, el) => {
    acc += `<div class="news-card" news-id="${el.id}">
      <div class="news-card__img">
        <p class="news-card__theme">${el.category}</p>
        <img
          class="news-card__item"
          src="${el.imgUrl}"
          alt="${el.imgDescr ? el.imgDescr : 'photo'}"
          loading="lazy"
          width="395"
        />
        <div class="news-card__favorite">
          <button id ='${
            el.id
          }' class="mybtn label-favorite">Add to favorite</button>
        </div>
      </div>
      <h2 class="news-card__info-title">${el.title.limit(50, {
        ending: '',
      })}</h2>
      <p class="news-card__info-text">${el.description.limit(120)}</p>
      <div class="news-card__additional">
        <p class="news-card__date">${el.pubDate}</p>
        <a class="news-card__more" href="${el.url}" id="${
      el.id
    }"target="_blank" rel="noreferrer noopener">Read more</a>
      </div>
    </div>`;
    return acc;
  }, ``);
  // –¥–æ–¥–æ—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω—É —Ä–æ–∑–º—ñ—Ç–∫—É –≤ DOM
  gallery.insertAdjacentHTML('beforeend', markUp);
}
function deleteNewsCards() {
  // –≤–∏–¥–∞–ª—è—î –ø–æ–≤–Ω—ñ—Å—Ç—é —Ä–æ–∑–º—ñ—Ç–∫—É —ñ  –∫–∞–ª–µ–Ω–¥–∞—Ä —Ç–∞–∫–æ–∂ (—Ç–∏–º—á–∞—Å–æ–≤–∏–π –∫–æ–¥)
  // gallery.innerHTML = '';
  // –≤–∏–¥–∞–ª—è—î —Ç—ñ–ª—å–∫–∏ newsCards, –ø–æ–≥–æ–¥–∞ —â–∑–∞–ª–∏—à–∞—î—Ç—å—Å—è, –∞–ª–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ —Ç—ñ–ª—å–∫–∏, —è–∫—â–æ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤–∂–µ —Ä–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ–∫ –Ω–æ–≤–∏–Ω
  const newsCards = fetchNews.getNodeChild();
  // console.log('üíõüíôüí™  newsCards:', newsCards);

  newsCards.forEach(el => el.remove());
}

function saveCategoryData(data) {
  let img = null;
  let imgDescr = null;
  // console.log(!data[148].multimedia);

  data.forEach(el => {
    if (el.multimedia) {
      el.multimedia.forEach(e => {
        if (e.format.includes('440')) {
          img = e.url;
          imgDescr = e.caption;
        }
      });
    }

    const pubDate = formatDate(el.published_date);
    const obj = {
      title: el.title,
      description: el.abstract,
      category: el.section,
      pubDate,
      url: el.url,
      img,
      imgDescr,
      id: el.uri,
    };

    pushData(obj);
    fetchNews.addCategoryData(createObj(obj));
  });
}

function savePopularData(data) {
  let img = null;

  data.forEach(element => {
    const media = element.media;
    media.forEach(e => {
      img = e['media-metadata'][2].url;
    });

    const pubDate = element.published_date.split('-').reverse().join('/');

    const obj = {
      title: element.title,
      description: element.abstract,
      category: element.section,
      pubDate,
      url: element.url,
      img,
      imgDescr: element.nytdsection,
      id: element.id,
    };
    pushData(obj);
  });
}

function saveSearchData(data) {
  let img = null;

  data.forEach(element => {
    element.multimedia.forEach(e => {
      if (e.subType === 'xlarge') {
        img = `https://www.nytimes.com/${e.url}`;
      }
    });

    const pubDate = formatDate(element.pub_date);

    const imgDescr = element.keywords[0]?.value
      ? element.keywords[0].value
      : '';

    const obj = {
      title: element.headline.main,
      description: element.lead_paragraph,
      category: element.section_name,
      pubDate,
      url: element.web_url,
      img,
      imgDescr,
      id: element._id,
    };
    pushData(obj);
  });
}

function pushData(data) {
  fetchNews.addData(createObj(data));
  fetchNews.addStorageData(createObj(data));
}

//–ø—Ä–∏–≤–æ–¥–∏–º–æ –¥–∞—Ç—É –¥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
function formatDate(dateString) {
  const date = new Date(dateString);
  const day = date.getDate().toString().padStart(2, '0'); // –¥–æ–¥–∞—î–º–æ –Ω—É–ª—å, —è–∫—â–æ —á–∏—Å–ª–æ –º–µ–Ω—à–µ 10
  const month = (date.getMonth() + 1).toString().padStart(2, '0'); // –¥–æ–¥–∞—î–º–æ –Ω—É–ª—å, —è–∫—â–æ –º—ñ—Å—è—Ü—å –º–µ–Ω—à–µ 10
  const year = date.getFullYear();
  return `${day}/${month}/${year}`;
}

//–æ–±—Ä—ñ–∑–∞—î–º–æ –æ–ø–∏—Å —è–∫—â–æ –±—ñ–ª—å—à–µ 180 —Å–∏–º–≤–æ–ª—ñ–≤
function cutInfo(text) {
  return text.length <= 180 ? text : text.slice(0, 180) + '...';
}

// –í—Å—Ç–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ –±–ª–æ–∫ then(), –ø–æ—Å–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–Ω–¥–µ—Ä–∏—Ç —Ä–∞–∑–º–µ—Ç–∫—É!!!
function addClassesForCoincidencesMarkupAndStorage() {
  const favouriteList = getStorageList('favourites');
  const labelsEl = document.querySelectorAll('.label-favorite');
  const newArrOfBtn = [...labelsEl];

  newArrOfBtn.filter(obj => {
    for (const objOfFavourite of favouriteList) {
      if (obj.id == objOfFavourite.id) {
        obj.className = 'mybtn label-favorite js-favourite-storage';
        obj.parentNode.firstElementChild.textContent = 'Remove from favorite';
      }
    }
  });
  //-----------------------------------------
  const readMoreList = getStorageList('read more');

  const linkEl = document.querySelectorAll('.news-card__more');

  const newArrOfLinks = [...linkEl];

  newArrOfLinks.filter(obj => {
    for (const objOfFavourite of readMoreList) {
      if (obj.id === objOfFavourite.id) {
        obj.className = 'news-card__more js-read-more-storage';
      }
    }
  });
}

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü fovorite –∏ read more
function addClassesForCoincidencesMarkupAndStoragePages() {
  const favouriteList = getStorageList('favourites');
  const labelsEl = document.querySelectorAll('.label-favorite');
  const newArrOfBtn = [...labelsEl];
  newArrOfBtn.filter(obj => {
    for (const objOfFavourite of favouriteList) {
      if (obj.id === objOfFavourite.id) {
        obj.className = 'mybtn label-favorite js-favourite-storage';
        obj.parentNode.firstElementChild.textContent = 'Remove from favorite';
      }
    }
  });
}

// –í–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –õ–û–ö–ê–õ–°–¢–û–†–ò–î–ñ
function getStorageList(valueOfKeyStorage) {
  return JSON.parse(localStorage.getItem(valueOfKeyStorage));
}

function showNotFoundMessage() {
  emptyPageContainer.classList.remove('is-hidden');
}
function hideNotFoundMessage() {
  emptyPageContainer.classList.add('is-hidden');
}

export {
  cutInfo,
  formatDate,
  createObj,
  renderNewsCards,
  deleteNewsCards,
  saveCategoryData,
  savePopularData,
  saveSearchData,
  getStorageList,
  addClassesForCoincidencesMarkupAndStorage,
  addClassesForCoincidencesMarkupAndStoragePages,
  showNotFoundMessage,
  hideNotFoundMessage,
};
